package com.ruiping.BankApp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EMP.
*/
public class EmpDao extends AbstractDao<Emp, String> {

    public static final String TABLENAME = "EMP";

    /**
     * Properties of entity Emp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property EmpId = new Property(0, String.class, "empId", true, "EMP_ID");
        public final static Property EmpMobile = new Property(1, String.class, "empMobile", false, "EMP_MOBILE");
        public final static Property NewPhone = new Property(2, String.class, "newPhone", false, "NEW_PHONE");
        public final static Property EmpName = new Property(3, String.class, "empName", false, "EMP_NAME");
        public final static Property EmpCover = new Property(4, String.class, "empCover", false, "EMP_COVER");
        public final static Property PushId = new Property(5, String.class, "pushId", false, "PUSH_ID");
        public final static Property DeviceId = new Property(6, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property ChannelId = new Property(7, String.class, "channelId", false, "CHANNEL_ID");
    };

    private DaoSession daoSession;


    public EmpDao(DaoConfig config) {
        super(config);
    }
    
    public EmpDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EMP' (" + //
                "'EMP_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: empId
                "'EMP_MOBILE' TEXT," + // 1: empMobile
                "'NEW_PHONE' TEXT," + // 2: newPhone
                "'EMP_NAME' TEXT," + // 3: empName
                "'EMP_COVER' TEXT," + // 4: empCover
                "'PUSH_ID' TEXT," + // 5: pushId
                "'DEVICE_ID' TEXT," + // 6: deviceId
                "'CHANNEL_ID' TEXT);"); // 7: channelId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EMP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Emp entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getEmpId());
 
        String empMobile = entity.getEmpMobile();
        if (empMobile != null) {
            stmt.bindString(2, empMobile);
        }
 
        String newPhone = entity.getNewPhone();
        if (newPhone != null) {
            stmt.bindString(3, newPhone);
        }
 
        String empName = entity.getEmpName();
        if (empName != null) {
            stmt.bindString(4, empName);
        }
 
        String empCover = entity.getEmpCover();
        if (empCover != null) {
            stmt.bindString(5, empCover);
        }
 
        String pushId = entity.getPushId();
        if (pushId != null) {
            stmt.bindString(6, pushId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(7, deviceId);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(8, channelId);
        }
    }

    @Override
    protected void attachEntity(Emp entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Emp readEntity(Cursor cursor, int offset) {
        Emp entity = new Emp( //
            cursor.getString(offset + 0), // empId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // empMobile
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // newPhone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // empName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // empCover
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pushId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deviceId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // channelId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Emp entity, int offset) {
        entity.setEmpId(cursor.getString(offset + 0));
        entity.setEmpMobile(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNewPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmpName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmpCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPushId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeviceId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChannelId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Emp entity, long rowId) {
        return entity.getEmpId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Emp entity) {
        if(entity != null) {
            return entity.getEmpId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
